@page
@model CapstonePage.Pages.IndexModel
@{
    ViewData["Title"] = "Parking Space Status";
}

<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

<!-- Custom CSS -->
<style>
    body {
        background-color: #898c8e !important;
    }

    .parking-lot-header {
        background-color: #343a40;
        font-size: 1.5rem;
        font-weight: bold;
        padding: 0.75rem;
        margin-top: 2rem;
        margin-bottom: 1rem;
        border-radius: 0.25rem;
        color: white;
    }

    .clickable-row {
        cursor: pointer;
    }
</style>

<div class="container mt-5">
    <h1 class="mb-4 text-white">Parking Space Availability</h1>
    <div id="parking-lots-container"></div>
</div>

<script>
    async function loadMachines() {
        try {
            const response = await fetch('/Index?handler=MachinesJson');
            const machines = await response.json();

            // Group by parking lot
            const grouped = {};
            machines.forEach(machine => {
                const lot = machine.parking_Lot || 'N/A';
                if (!grouped[lot]) grouped[lot] = [];
                grouped[lot].push(machine);
            });

            // Sort lots alphanumerically
            const sortedLots = Object.keys(grouped).sort((a, b) => a.localeCompare(b, undefined, { numeric: true }));

            const container = document.getElementById('parking-lots-container');
            container.innerHTML = '';

            sortedLots.forEach(parkingLot => {
                container.appendChild(createMachineTable(parkingLot, grouped[parkingLot]));
            });

        } catch (err) {
            console.error("AJAX fetch failed:", err);
        }
    }

    function createMachineTable(parkingLot, machines) {
        const wrapper = document.createElement('div');

        const header = document.createElement('div');
        header.className = 'parking-lot-header';
        header.textContent = `🅿️ Parking Lot ${parkingLot}`;
        wrapper.appendChild(header);

        const table = document.createElement('table');
        table.className = 'table table-bordered table-hover';

        const thead = document.createElement('thead');
        thead.className = 'table-dark';
        thead.innerHTML = `
            <tr>
                <th>Space</th>
                <th>Status</th>
            </tr>
        `;
        table.appendChild(thead);

        const tbody = document.createElement('tbody');
        machines.forEach(machine => {
	    // debug
	    //console.log(`Machine: ${machine.hostname}, lng: ${machine.lng}, lat: ${machine.lat}`);
	
            const row = document.createElement('tr');
            row.className = (machine.parking_Space_available === 1 ? 'table-success' : 'table-danger') + ' clickable-row';

            const hasCoords = machine.lng !== null && machine.lat !== null && machine.lng !== undefined && machine.lat !== undefined;
            const gpsUrl = hasCoords
                ? `https://map.capstone.sqid.ink?lng=${machine.lng}&lat=${machine.lat}`
                : `https://map.capstone.sqid.ink?lng=-119.0431&lat=34.1610`;

            row.addEventListener('click', () => {
                window.location.href = gpsUrl;
            });

            row.innerHTML = `
                <td>${machine.parking_Space || 'N/A'}</td>
                <td>${machine.parking_Space_available === 1 ? 'Available' : 'Occupied'}</td>
            `;
            tbody.appendChild(row);
        });

        table.appendChild(tbody);
        wrapper.appendChild(table);
        return wrapper;
    }

    loadMachines();
    setInterval(loadMachines, 5000);
</script>

<div id="bottom-space">
	<br>
	<br>
	<br>
</div>
